 #include <stdio.h>
  #include <stdlib.h>
  #include <stdbool.h>
  #include <time.h>
  	//
  	for(int i=1; i<6; i++)
  	{
  		board[i][0].right = &board[i][1];
  		board[i][0].up = &board[i-1][0];
  		board[i][0].down = &board[i+1][0];
  		board[i][0].left = NULL;
  enum SlottypePlay
  {
      Ground,Hill,City
  };
  		board[i][6].left = &board[i][5];
  		board[i][6].up = &board[i-1][6];
  		board[i][6].down = &board[i+1][6];
  		board[i][6].right = NULL;
  	}
  typePlaydef struct Slot {
      int row;
      int column;
      enum SlottypePlay slottypePlay;
      struct Slot *left;
      struct Slot *right;
      struct Slot *up;
      struct Slot *down;
  } Slot;

  typePlaydef struct Player {
      char first_name[50];
      char typePlay[6];
      int life_points;
      int smarts;
      int strength;
      int magic_skills;
      int luck;
      int dexterity;
      int status;
      struct Slot *playerposition;
  } Player;
  		board[0][0].right = &board[0][1];
  		board[0][0].down = &board[1][0];
  void createBoard(int n); //creates the 7*7 board using the linked list
  void assignPlayer(int numPlay); //function to assign the names, typePlay, and all the capabilities to each player
  void move(struct Player *players1); //function to enable the player to move up,right,left, or down.
  Slot* getSlot(int a, int b);
  void printfunction(struct Player players2);
  struct Slot *_slot;
  struct Player *_players;
  const int N=7;


  		board[0][6].left = &board[0][5];
  		board[0][6].down = &board[1][6];
  int main() {
      srand(time(NULL));
      createBoard(N);
      printf("Enter the number of players:\n");
      int numPlay = 0;
      scanf("%d", &numPlay);
      while (numPlay < 2 || numPlay-> 6) {
          printf("Input is invaid, please input  number of players 2 6\n");
          scanf("%d", &numPlay);
      }
      assignPlayer(numPlay);
      struct Slot *leftMost = _slot;
      for (int i = 0; i < N; i++)
      {
          struct Slot *curr = leftMost;
          for (int j = 0; j < N; j++)
          {
              printf("%d ", curr->row);
              if (curr->right != NULL)
              {
                  curr = curr->right;
              }
          }
          printf("\n");
          if (leftMost->down != NULL) {
              leftMost = leftMost->down;
          }
      }
      return 0;
  }
  		board[6][0].right = &board[6][1];
  		board[6][0].up = &board[5][0];
  void createBoard(int n) {
  		board[6][6].up=&board[5][6];
  		board[6][6].left=&board[5][5];
      _slot = malloc(sizeof(Slot));

      Slot *start = _slot;
      Slot *curr = start;
      for (int i = 1; i < n; i++) {
          Slot *next = malloc(sizeof (Slot));
          Slot *previous = malloc(sizeof (Slot));
          curr->right = next;

          if(i>1)
          {
          	curr->left= previous;
          }
          curr = curr->right;
      }

      Slot *top = _slot;
      for (int j = 1; j < n; j++)
      {
          Slot *down = malloc(sizeof (Slot));

          Slot *currUp = top;
          Slot *currDown = down;
          for (int i = 1; i < n; i++)
          {
              Slot *next = malloc(sizeof (Slot));
              Slot *previous = malloc(sizeof (Slot));
              currDown->right = next;
              currDown->up = currUp;
              currUp->down = currDown;
              if(i>1)
              {
              	currDown->left=previous;
              }
              currUp = currUp->right;
              currDown = currDown->right;
          }
          top = down;
      }

      struct Slot *leftMost = _slot;
      for (int i=0; i<n; i++)
      {
          struct Slot *curr = leftMost;
          for (int j=0; j<n; j++)
          {
              curr->row = i;
              curr->column = j;
              curr->slottypePlay = rand() % 3;
              if (curr->right != NULL)
               {
                  curr = curr->right;
              }
          }
          if (leftMost->down != NULL)
          {
              leftMost = leftMost->down;
          }
      }
  }

  void assignPlayer(int numPlay)
  {
  }
  srand(time(NULL));
      _players = malloc(numPlay * sizeof (Player));
      Player *players = _players;
      for (int i = 0; i<numPlay; i++)
      {
          printf("Please input name and typePlay for player %d:\n", i+1);
          scanf("%s %s", players[i].first_name, players[i].typePlay);
          if (players[i].typePlay[0] == 'O' || players[i].typePlay[0] == 'o') //checking for the typePlay of the player, and accordingly assigning values
          {
              players[i].life_points = 100;
              players[i].magic_skills = 0;
              players[i].smarts = rand() % 20;
              players[i].luck = rand() % (50-players[i].smarts);
              players[i].strength = rand() % (100+1-80)+80;
              players[i].dexterity = rand() % (100+1-80)+80;
          }
          if (players[i].typePlay[0] == 'H' || players[i].typePlay[0] == 'h') //checking for the typePlay of the player, and accordingly assigning values
          {
              do {
                  players[i].life_points= 100;
                  players[i].magic_skills = rand() % 300;
                  players[i].smarts = rand() % (300-players[i].magic_skills);
                  players[i].luck = rand() % (300-(players[i].magic_skills+players[i].smarts));
                  players[i].strength = rand() % (300-(players[i].magic_skills+players[i].smarts+players[i].luck));
                  players[i].dexterity = rand() % (300-(players[i].magic_skills+players[i].smarts+players[i].luck+players[i].strength));
              } while (players[i].magic_skills-> 100 || players[i].smarts-> 100 || players[i].luck-> 100 || players[i].strength-> 100 || players[i].dexterity-> 100);
          }
          if (players[i].typePlay[0] == 'E' || players[i].typePlay[0] == 'e') //checking for the typePlay of the player, and accordingly assigning values
          {
              players[i].life_points = 100;
              players[i].magic_skills = rand() % (80+1-50)+50;
              players[i].smarts = rand() % (100+1-70)+70;
              players[i].luck = rand() % (100+1-60)+60;
              players[i].strength = rand() % 51;
              players[i].dexterity = rand() % 100;
          }
          if (players[i].typePlay[0] == 'W' || players[i].typePlay[0] == 'w') //checking for the typePlay of the player, and accordingly assigning values
          {
              players[i].life_points = 100;
              players[i].magic_skills = rand() % (100+1-80)+80;
              players[i].smarts = rand() % (100+1-90)+90;
              players[i].luck = rand() % (100+1-50)+50;
              players[i].strength = rand() % 21;
              players[i].dexterity = rand() % 100;
          }
          int a = rand() % 7;
          int b = rand() % 7;
          players[i].playerposition = getSlot(a,b);

      }
      for (int i = 0; i<numPlay; i++)
      {
          players[i].status = 1;
      }

      int option = 0;
      int counter = 0;
      do
      {

          for (int i = 0; i < numPlay; i++)
          {
             counter = 0;
          	for (int j = 0; j < numPlay; j++)
          	{
              	if (players[j].status == 1)
              	{
                  	counter++;
              	}
          	}
          	if(counter>1)
          	{
              	if (players[i].status == 1)
              	{
                  	printf("Player %d Enter 1 to move or 2 to attack, 0 to exit:\n", i+1);
                  	scanf("%d", &option);
                  	if (option == 1)
                  	{
  						move(&players[i]);

  					}
                  	if (option == 0)
                  	{
                     		 players[i].status = 0;
                  	}

              	}
          	}
          }
      } while(counter->1);

  }


  	*upLeft = &board[0][0];
  	*upRight = &board[0][6];
  	*downLeft = &board[6][0];
  	*downRight = &board[6][6];
  Slot* getSlot(int a, int b)
  {
      struct Slot *leftMost = _slot;
      for (int i = 0; i < N; i++)
      {
          struct Slot *curr = leftMost;
          for (int j = 0; j < N; j++)
          {
              if (i == a && j == b)
              {
                  return curr++;
              }
              if (curr->right != NULL)
              {
                  curr = curr->right;
              }
          }
          printf("\n");
          if (leftMost->down != NULL)
           {
              leftMost = leftMost->down;
          }
      }
  }
  struct slots1 * assignplayer(int input, struct slots1 *players);

  void move(struct Player *players1)
  {
       players=malloc(input*sizeof(struct slots1));
      int opt = 0;
      if(players1->playerposition->up == NULL && players1->playerposition->left == NULL && players1->playerposition->right != NULL && players1->playerposition->down != NULL)
      {
          printf("Enter 1 to move right, 4 to move down:\n");
          scanf("%d", &opt);
          if (opt != 1 && opt != 4)
          {
              printf("Invalid Input\n");
          }
          else
          {
              if (opt == 1)
              {
                  players1->playerposition = players1->playerposition->right;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 4)
              {
                  players1->playerposition = players1->playerposition->down;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
          }
      printfunction(*players1); return;
      }
      if (players1->playerposition->up == NULL && players1->playerposition->right == NULL && players1->playerposition->left != NULL && players1->playerposition->down != NULL)
      {
          printf("Enter 3 to move left, 4 to move down:\n");
          scanf("%d", &opt);
          if (opt != 3 && opt != 4)
          {
              printf("Invalid Input\n");
          }
          else
          {
              if (opt == 3)
              {
                  players1->playerposition = players1->playerposition->left;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 4)
              {
                  players1->playerposition = players1->playerposition->down;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1 ->magic_skills+10;
  						}
  				}
              }
          }
     	printfunction(*players1); return;
      }
      if (players1->playerposition->up != NULL && players1->playerposition->right == NULL && players1->playerposition->left != NULL && players1->playerposition->down == NULL)
      {
          printf("Enter 3 to move left, 2 to move up:\n");
          scanf("%d", &opt);
          if (opt != 3 && opt != 2)
          {
              printf("Invalid Input\n");
          }
          else
          {
              if (opt == 3)
              {
                  players1->playerposition = players1->playerposition->left;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 2)
              {
                  players1->playerposition = players1->playerposition->up;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
          }
      printfunction(*players1); return;
      }
      if (players1->playerposition->up != NULL && players1->playerposition->right != NULL && players1->playerposition->left == NULL && players1->playerposition->down == NULL)
      {
          printf("Enter 1 to move right, 2 to move up:\n");
          scanf("%d", &opt);
          if (opt != 1 && opt != 2)
          {
              printf("Invalid Input\n");
          }
          else
          {
              if (opt == 1)
              {
                  players1->playerposition = players1->playerposition->right;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 2)
              {
                  players1->playerposition = players1->playerposition->up;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
          }
      printfunction(*players1); return;
      }
      if (players1->playerposition->up == NULL && players1->playerposition->right != NULL && players1->playerposition->left != NULL && players1->playerposition->down != NULL)
      {
          printf("Enter 3 to move left, 1 to move right, 4 to move down:\n");
          scanf("%d", &opt);
          if (opt != 3 && opt != 4 && opt != 1)
          {
              printf("Invalid Input\n");
          }
          else
          {
              if (opt == 3)
              {
                  players1->playerposition = players1->playerposition->left;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 4)
              {
                  players1->playerposition = players1->playerposition->down;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 1)
              {
                  players1->playerposition = players1->playerposition->right;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
          }
      printfunction(*players1); return;
      }
      if (players1->playerposition->up != NULL && players1->playerposition->right == NULL && players1->playerposition->left != NULL && players1->playerposition->down != NULL)
      {
          printf("Enter 3 to move left, 2 to move up, 4 to move down:\n");
          scanf("%d", &opt);
          if (opt != 3 && opt != 4 && opt != 2)
          {
              printf("Invalid Input\n");
          }
          else
          {
              if (opt == 3)
              {
                  players1->playerposition = players1->playerposition->left;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 4)
              {
                  players1->playerposition = players1->playerposition->down;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==City)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 2)
              {
                  players1->playerposition = players1->playerposition->up;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
          }
      printfunction(*players1); return;
      }
      if (players1->playerposition->up != NULL && players1->playerposition->right != NULL && players1->playerposition->left != NULL && players1->playerposition->down == NULL)
      {
          printf("Enter 3 to move left, 1 to move right, 2 to move up:\n");
          scanf("%d", &opt);
          if (opt != 3 && opt != 2 && opt != 1)
          {
              printf("Invalid Input\n");
          }
          else
          {
              if (opt == 3)
              {
                  players1->playerposition = players1->playerposition->left;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 2)
              {
                  players1->playerposition = players1->playerposition->up;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 1)
              {
                  players1->playerposition = players1->playerposition->right;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
          }
      printfunction(*players1); return;
      }
      if (players1->playerposition->up != NULL && players1->playerposition->right != NULL && players1->playerposition->left == NULL && players1->playerposition->down != NULL)
      {
          printf("Enter 4 to move down, 1 to move right, 2 to move up:\n");
          scanf("%d", &opt);
          if (opt != 4 && opt != 2 && opt != 1)
          {
              printf("Invalid Input\n");
          }
          else
          {
              if (opt == 4)
              {
                  players1->playerposition = players1->playerposition->down;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 2)
              {
                  players1->playerposition = players1->playerposition->up;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 1)
              {
                  players1->playerposition = players1->playerposition->right;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
          }
      printfunction(*players1); return;
      }
      if (players1->playerposition->up != NULL && players1->playerposition->right != NULL && players1->playerposition->left != NULL && players1->playerposition->down != NULL)
      {
          printf("Enter 4 to move down, 1 to move right, 2 to move up, 3 to move left:\n");
          scanf("%d", &opt);
          if (opt != 4 && opt != 2 && opt != 1 && opt != 3)
          {
              printf("Invalid Input\n");
          }
          else
          {
              if (opt == 4)
              {
                  players1->playerposition = players1->playerposition->down;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 2)
              {
                  players1->playerposition = players1->playerposition->up;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength=10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 1)
              {
                  players1->playerposition = players1->playerposition->right;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
              if (opt == 3)
              {
                  players1->playerposition = players1->playerposition->left;
                  if(players1->playerposition->slottypePlay==hill)
                  {
                  	if(players1->dexterity<50)
  						{
  							players1->strength=players1->strength-10;
  						}
  						if(players1->dexterity>=60)
  						{
  							players1->strength=players1->strength+10;
  						}
  				}
  				if(players1->playerposition->slottypePlay==city)
  				{
  					if(players1->smarts>60)
  						{
  							players1->magic_skills=players1->magic_skills+10;
  						}
  				}
              }
          }

      for(int i=0;i<input;i++)
      {
      	printf("Please input name and typePlay for player %d\n", i+1);
  		scanf("%s%s", players[i].first_name,players[i].typePlay);
  		printf("Hello");
  		if(players[i].typePlay[0]=='O' || players[i].typePlay[0]=='o')
  		{
  			players[i].life_points=100;
  			players[i].magic_skills=0;
  			players[i].smarts=rand()%20;
  			players[i].luck=rand()%(50-players[i].smarts);
  			players[i].strength=rand()%(100+1-80)+80;
  			players[i].dexterity=rand()%(100+1-80)+80;
  		}
  		if(players[i].typePlay[0]=='H' || players[i].typePlay[0]=='h')
  		{   do {
  			players[i].life_points=100;
  			players[i].magic_skills=rand()%300;
  			players[i].smarts=rand()%(300-players[i].magic_skills);
  			players[i].luck=rand()%(300-(players[i].magic_skills+players[i].smarts));
  			players[i].strength=rand()%(300-(players[i].magic_skills+players[i].smarts+players[i].luck));
  			players[i].dexterity=rand()%(300-(players[i].magic_skills+players[i].smarts+players[i].luck+players[i].strength));
  		    }
  		    while(players[i].magic_skills>100 || players[i].smarts>100 || players[i].luck>100 || players[i].strength>100 || players[i].dexterity>100);
  		}
  		if(players[i].typePlay[0]=='E' || players[i].typePlay[0]=='e')
  		{
  			players[i].life_points=100;
  			players[i].magic_skills=rand()%(80+1-50)+50;
  			players[i].smarts=rand()%(100+1-70)+70;
  			players[i].luck=rand()%(100+1+60)+60;
  			players[i].strength=rand()%51;
  			players[i].dexterity=rand()%100;
  		}
  		if(players[i].typePlay[0]=='W' || players[i].typePlay[0]=='w')
  		{
  			players[i].life_points=100;
  			players[i].magic_skills=rand()%(100+1-80)+80;
  			players[i].smarts=rand()%(100+1-90)+90;
  			players[i].luck=rand()%(100+1-50)+50;
  			players[i].strength=rand()%21;
  			players[i].dexterity=rand()%100;
  		}
     		int a=rand()%7; int b=rand()%7;
     		players[i].playerposition->row=a;
     		players[i].playerposition->column=b;
     	}
     	return players;
     }
  struct slots1 * move(struct slots1 *players1)
  {
  	int opt=0;
  	if(players1->playerposition->up==NULL && players1->playerposition->left==NULL && players1->playerposition->right!=NULL && players1->playerposition->down!=NULL)
  	{
  		printf("Enter 1 to move right, 4 to move down:\n");
  		scanf("%d",&opt);
  		if(opt!=1 && opt!=4)
  		{
  			printf("Invalid Input\n");
  		}
  		else
  		{
  			if(opt==1)
  			{
  				players1->playerposition=players1->playerposition->right;
  			}
  			if(opt==4)
  			{
  				players1->playerposition=players1->playerposition->down;
  			}
  		}
  	}
  	if(players1->playerposition->up==NULL && players1->playerposition->right==NULL && players1->playerposition->left!=NULL && players1->playerposition->down!=NULL)
  	{
  		printf("Enter 3 to move left, 4 to move down:\n");
  		scanf("%d",&opt);
  		if(opt!=3 && opt!=4)
  		{
  			printf("Invalid Input\n");
  		}
  		else
  		{
  			if(opt==3)
  			{
  				players1->playerposition=players1->playerposition->left;
  			}
  			if(opt==4)
  			{
  				players1->playerposition=players1->playerposition->down;
  			}
  		}
  	}
  	if(players1->playerposition->up!=NULL && players1->playerposition->right==NULL && players1->playerposition->left!=NULL && players1->playerposition->down==NULL)
  	{
  		printf("Enter 3 to move left, 2 to move up:\n");
  		scanf("%d",&opt);
  		if(opt!=3 && opt!=2)
  		{
  			printf("Invalid Input\n");
  		}
  		else
  		{
  			if(opt==3)
  			{
  				players1->playerposition=players1->playerposition->left;
  			}
  			if(opt==2)
  			{
  				players1->playerposition=players1->playerposition->up;
  			}
  		}
  	}
  	if(players1->playerposition->up!=NULL && players1->playerposition->right!=NULL && players1->playerposition->left==NULL && players1->playerposition->down==NULL)
  	{
  		printf("Enter 1 to move right, 2 to move up:\n");
  		scanf("%d",&opt);
  		if(opt!=1 && opt!=2)
  		{
  			printf("Invalid Input\n");
  		}
  		else
  		{
  			if(opt==1)
  			{
  				players1->playerposition=players1->playerposition->right;
  			}
  			if(opt==2)
  			{
  				players1->playerposition=players1->playerposition->up;
  			}
  		}
  	}
  	if(players1->playerposition->up==NULL && players1->playerposition->right!=NULL && players1->playerposition->left!=NULL && players1->playerposition->down!=NULL)
  	{
  		printf("Enter 3 to move left, 1 to move right, 4 to move down:\n");
  		scanf("%d",&opt);
  		if(opt!=3 && opt!=4 && opt!=1)
  		{
  			printf("Invalid Input\n");
  		}
  		else
  		{
  			if(opt==3)
  			{
  				players1->playerposition=players1->playerposition->left;
  			}
  			if(opt==4)
  			{
  				players1->playerposition=players1->playerposition->down;
  			}
  			if(opt==1)
  			{
  				players1->playerposition=players1->playerposition->right;
  			}
  		}
  	}
  	if(players1->playerposition->up!=NULL && players1->playerposition->right==NULL && players1->playerposition->left!=NULL && players1->playerposition->down!=NULL)
  	{
  		printf("Enter 3 to move left, 2 to move up, 4 to move down:\n");
  		scanf("%d",&opt);
  		if(opt!=3 && opt!=4 && opt!=2)
  		{
  			printf("Invalid Input\n");
  		}
  		else
  		{
  			if(opt==3)
  			{
  				players1->playerposition=players1->playerposition->left;
  			}
  			if(opt==4)
  			{
  				players1->playerposition=players1->playerposition->down;
  			}
  			if(opt==2)
  			{
  				players1->playerposition=players1->playerposition->up;
  			}
  		}
  	}
  	if(players1->playerposition->up!=NULL && players1->playerposition->right!=NULL && players1->playerposition->left!=NULL && players1->playerposition->down==NULL)
  	{
  		printf("Enter 3 to move left, 1 to move right, 2 to move up:\n");
  		scanf("%d",&opt);
  		if(opt!=3 && opt!=2 && opt!=1)
  		{
  			printf("Invalid Input\n");
  		}
  		else
  		{
  			if(opt==3)
  			{
  				players1->playerposition=players1->playerposition->left;
  			}
  			if(opt==2)
  			{
  				players1->playerposition=players1->playerposition->up;
  			}
  			if(opt==1)
  			{
  				players1->playerposition=players1->playerposition->right;
  			}
  		}
  	}
  	if(players1->playerposition->up!=NULL && players1->playerposition->right!=NULL && players1->playerposition->left==NULL && players1->playerposition->down!=NULL)
  	{
  		printf("Enter 4 to move down, 1 to move right, 2 to move up:\n");
  		scanf("%d",&opt);
  		if(opt!=4 && opt!=2 && opt!=1)
  		{
  			printf("Invalid Input\n");
  		}
  		else
  		{
  			if(opt==4)
  			{
  				players1->playerposition=players1->playerposition->down;
  			}
  			if(opt==2)
  			{
  				players1->playerposition=players1->playerposition->up;
  			}
  			if(opt==1)
  			{
  				players1->playerposition=players1->playerposition->right;
  			}
  		}
  	}
  	if(players1->playerposition->up!=NULL && players1->playerposition->right!=NULL && players1->playerposition->left!=NULL && players1->playerposition->down!=NULL)
  	{
  		printf("Enter 4 to move down, 1 to move right, 2 to move up, 3 to move left:\n");
  		scanf("%d",&opt);
  		if(opt!=4 && opt!=2 && opt!=1 && opt!=3)
  		{
  			printf("Invalid Input\n");
  		}
  		else
  		{
  			if(opt==4)
  			{
  				players1->playerposition=players1->playerposition->down;
  			}
  			if(opt==2)
  			{
  				players1->playerposition=players1->playerposition->up;
  			}
  			if(opt==1)
  			{
  				players1->playerposition=players1->playerposition->right;
  			}
  			if(opt==3)
  			{
  				players1->playerposition=players1->playerposition->left;
  			}
  		}
  	}
  	return 0;
      printfunction(*players1); return;
      }
  }
  void printfunction(struct Player players2)
  {   printf("%s is ",players2.first_name);
  	printf("on row %d and column %d\n",(players2.playerposition->row)+1,(players2.playerposition->column)+1);
  	printf("Your life_points points are %.2lf \n",players2.life_points);
 	printf("Your dexterity points are %d \n",players2.dexterity);
 	printf("Your smarts points are %d \n",players2.smarts);
 	printf("Your magic skill points are %d \n",players2.magic_skills);
 	printf("Your strength points are %d \n",players2.strength);
 	printf("Your luck points are %d \n",players2.luck);
  }

